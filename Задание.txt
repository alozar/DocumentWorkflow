Тестовое задание на бэкенд ASP.NET Core

Базовый уровень:

Реализовать систему электронного документооборота со следующими функциями:
1. Регистрация входящих документов
2. Регистрация исходящих документо
3. Движение документов по рабочему процессу

Реализовать веб-интерфейс со страницами
 - общая таблица документов
 - форма регистрации документа (входящий и исходящий отдельно)
 - формы просмотра и редактирования документов

В общей таблице у каждого документа должны быть кнопки для перевода статуса по соответствующему процессу
Отображаются документы, не помещенные в архив

Структура входящего документа:
 - заявитель (строка)
 - дата регистрации (дата и время)
 - номер документа (строка)
 - содержание

Номер документа генерируется автоматически при регистрации по шаблону "Вх-<текущий год>-<счетчик>"

Движение входящего документа по статусам 
 - зарегистрирован - документ создан, доступен для редактирования
 - в работе - документ зафиксирован и не подлежит редактированию
 - в архиве - документ перемещен в архив и не показывается в общем реестре

Структура исходящего документа
 - дата регистрации (дата и время)
 - номер (строка)
 - адресат (строка)
 - тема (строка)
 - содержание (строка)
 - подписант (строка)
 - номер входящиего документа, в ответ на который создан исходящий документ (ссылка на входящий документ, не обязательное поле)

Документ может создаваться как самостоятельный документ, так и привязанный к входящему документу.

Движение исходящего документа:
 - зарегистрирован - доступны для редактирования все поля
 - на подпись - доступно для редактирования только поле "подписант"
 - отправлен - документ зафиксирован и не подлежит редактированию
 - в архиве - документ перемещен в архив и не показывается в общем реестре

Номер документа генерируется автоматически при регистрации по шаблону "Исх-<текущий год>-<счетчик>"

Все переводы статусов возможны только на следующую стадию по порядку

Используемые технологии: ASP.NET Core, EF Core. Веб-морду можно реализовать в любов виде - хоть MVC, хоть Razor Pages, хоть Blazor

Продвинутый уровень:

- у программы должно быть четкое деление по слоям: слой данных, слой бизнес-логики, слой веб-представления
- требуется самостоятельно спроектировать сущности "Человек", "Сотрудник", "Организация"
- документ должен принадлежать какой-нибудь организации
- поле входящего документа "заявитель" может иметь тип либо "человек", либо "организация"
- поле исходящего документа "адресат" может иметь тип либо "человек", либо "организация", либо "сотрудник"
- поле исходящего документа "подписат" должно иметь тип "сотрудник", и должна быть проверка, что сотрудник принадлежит той же организации, что и документ
- реализовать выбор адресата, заявителя и подписанта из выпадающего списка, с сохранением произвольно введенных данных
- реализовать авторизацию для сотрудников
- показывать в общей форме только документы, принадлежащие организации авторизованного сотрудника
- реализовать просмотр архива документов

Используемые технологии: те же

Дополнительные задачи для тех, кому все предыдущее было слишком просто:
 - завернуть все это в докер, реализовать запуск сервиса через docker compose
 - реализовать отправку уведомлений авторизованному пользователю, если в его организации зарегистрирован новый документ
 - реализовать прикрепление вложений для документов. Файлы хранить в minio
 - реализовать протокол взаимодействия с внешними системами через очередь (например, rabbitmq). Должна быть автоматическая регистрация документов при получении сообщения, 
и отправка сообщения при изменении статуса документа



 

